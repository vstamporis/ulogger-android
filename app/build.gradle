/*
 * Copyright (c) 2017 Bartek Fabiszewski
 * http://www.fabiszewski.net
 *
 * This file is part of Î¼logger-android.
 * Licensed under GPL, either version 3, or any later.
 * See <http://www.gnu.org/licenses/>
 */

apply plugin: 'com.android.application'
apply plugin: 'gr.aueb.android.barista-plugin'
apply plugin: 'jacoco'

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.3'

    defaultConfig {
        applicationId 'net.fabiszewski.ulogger'
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 304
        versionName '3.4'
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            //applicationIdSuffix '.debug'
            //versionNameSuffix '-dev'
            testCoverageEnabled true
        }
    }

    lintOptions {
        disable 'GoogleAppIndexingWarning'
        disable 'MissingTranslation'
        disable 'NotificationIconCompatibility'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.exifinterface:exifinterface:1.3.2'
    testImplementation 'junit:junit:4.13'
}


task jacocoTestReport(type: JacocoReport) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'android/**/*.*',
                      '**/data/models/*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    getSourceDirectories().setFrom(files([mainSrc]))
    getClassDirectories().setFrom(files([debugTree]))
    getExecutionData().setFrom(fileTree(dir: "$project.rootDir", includes: [
            "coverage.exec"
    ]))

}